{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(DT)\nlibrary(gsubfn)\nlibrary(data.table)\nlibrary(googleVis)\nlibrary(stringr)\n\ngwas <- read.delim(\"data/gwas_go.tsv\",stringsAsFactors = FALSE,encoding = 'UTF-8')\ngwas <- data.table(gwas)\ngwas$CNV <- NULL\n\nsearch <- function(y,z) {\n  words <- unlist( strsplit( z, \"\\\\ \" ) )\n  ldt <- apply(y,MARGIN=1, function(x) {\n    var <- TRUE\n    for (word in words) { \n      var <- grepl(word, x, perl=TRUE,ignore.case = TRUE);\n      if ( sum(var) == 0 ) {\n        return(FALSE)\n      }\n    }\n    return(TRUE)\n  }\n  )\n  gtac <- y[ldt,]\n  return(gtac)\n}\n\nsep <- function(x) {\n  z <- 0\n  x <- gsub(',', '', x)\n  matches <- regmatches(x, gregexpr(\"[[:digit:]]+\", x))\n  z <- sum(as.numeric(unlist(matches)))\n  return(z)\n}\n\nsepcikl <- function(x) {\n  z <- numeric()\n  for (i in 1:(length(x))) {z[i] <- sep(x[i]) }\n  return(z)\n}\n\ndisease <- function(x) {\n  dat <- 0\n  if(nrow(x) != 0) {\n    x <- x[!duplicated(x$DISEASE.TRAIT), ]\n    arj <- unlist(x[,9,with = FALSE], recursive = TRUE, use.names = FALSE)\n    x$DISEASE.TRAIT <-  apply(x, MARGIN = 1, \n                              function(x)  { names(x) = names(x); paste(\"<a href=\\\"\", x[\"LINK\"],\"\\\" target=\\\"_blank\\\">\", x[\"DISEASE.TRAIT\"], \"</a>\", sep = \"\") } )\n    common_dis <- unlist(x[,8,with = FALSE], recursive = TRUE, use.names = FALSE)\n    Participants_sum <- sepcikl(arj)\n    dat <- data.table(Disease.Trait = common_dis,Participants_sum)\n  }\n  return(dat)\n}\n\nchr <- function(x) {\n  z <- numeric()\n  z1 <- character() \n  for(i in 1:23) {z[i] <- nrow(x[CHR_ID == i,]);z1[i] <- i}\n  z1[23] <- \"X\"\n  z1[24] <- \"Y\"\n  z[24] <- 0\n  dat <- data.table(Chromosome = z1,\" \" = z)\n  maxind <- which.max(dat$` `)\n  mac <- z1[maxind]\n  if(mac == \"X\") {chrdat <- x[CHR_ID==\"23\",]}\n  else {chrdat <- x[CHR_ID==mac,]}\n  snps <- unlist(chrdat[,22,with = FALSE], recursive = TRUE, use.names = FALSE)\n  snps <- gsub(\"x\", \",\", snps)\n  snps <- unlist( strsplit( snps , \"\\\\,\" ) )\n  snps <- snps[! snps %in% \"NR\"]\n  snps <- unique(snps)\n  num_snps <- c(\"(Num_snps = \",length(snps),\")\")\n  if(sum(dat$` `) == 0) {mac <- \"Not found\";num_snps <- NULL}\n  mostchr <- c(\"Most affected chormosome = \",mac,num_snps)\n  return(list(dat,mostchr))\n}\n\nnumbers <- function(x) {\n  study <- unlist(x[,7,with = FALSE], recursive = TRUE, use.names = FALSE)\n  study <- unique(study)\n  num_study <- length(study)\n  snps <- unlist(x[,22,with = FALSE], recursive = TRUE, use.names = FALSE)\n  snps <- gsub(\"x\", \",\", snps)\n  snps <- unlist( strsplit( snps , \"\\\\,\" ) )\n  snps <- snps[! snps %in% \"NR\"]\n  snps <- snps[!is.na(snps)]\n  snps <- gsub(\"(^[[:space:]]+|[[:space:]]+$)\", \"\", snps)\n  snps <- unique(snps)\n  num_snps <- length(snps)\n  genes <- unlist(x[,14,with = FALSE], recursive = TRUE, use.names = FALSE)\n  genes <- unlist( strsplit( genes , \"\\\\,\" ) )\n  genes <- genes[! genes %in% \"NR\"]\n  genes <- genes[! genes %in% \"intergenic\"]\n  genes <- genes[!is.na(genes)]\n  genes <- gsub(\"(^[[:space:]]+|[[:space:]]+$)\", \"\", genes)\n  genes <- unique(genes)\n  num_genes <- length(genes)\n  disease <- unlist(x[,8,with = FALSE], recursive = TRUE, use.names = FALSE)\n  disease <- unique(disease)\n  num_disease <- length(disease)\n  return(c(\"Number of snps = \",num_snps,\", studies = \",num_study,\", genes = \",num_genes,\", disease.traits = \",num_disease))\n}\n\nstudy <- function(x) {\n  x <- x[!duplicated(x$STUDY), ]\n  x$STUDY <-  apply(x, MARGIN = 1, \n                    function(x)  { names(x) = names(x); paste(\"<a href=\\\"\", x[\"LINK\"],\"\\\" target=\\\"_blank\\\">\", x[\"STUDY\"], \"</a>\", sep = \"\") } )\n  pze <- x[,7,with = FALSE]\n  colnames(pze) <- \"Studies\"\n  return(pze)\n}\n\noccurrence_gene <- function(x) {\n  dat <- NULL\n  if(nrow(x) != 0) {\n    genes <- unlist(x[,14,with = FALSE], recursive = TRUE, use.names = FALSE)\n    genes <- unlist( strsplit( genes , \"\\\\,\" ) )\n    genes <- genes[! genes %in% \"NR\"]\n    genes <- genes[! genes %in% \"intergenic\"]\n    genes <- genes[!is.na(genes)]\n    genes <- gsub(\"(^[[:space:]]+|[[:space:]]+$)\", \"\", genes)\n    if(length(genes) != 0) {\n      dat <- table(genes)\n      dat <- data.table(dat)\n      colnames(dat) <- c(\"Genes\",\"Number_of_occurrences\")\n      dat$Genes <-  apply(dat, MARGIN = 1, \n                          function(x)  { names(x) = names(dat); paste(\"<a href=http://www.ensembl.org/Homo_sapiens/Gene/Summary?g=\",x[\"Genes\"],\" target=\\\"_blank\\\">\", x[\"Genes\"], \"</a>\", sep = \"\") } )\n      dat <- dat[order(dat$Number_of_occurrences,decreasing = TRUE),] \n    }\n  }\n  return(dat)\n}\n\noccurrence_snp <- function(x) {\n  dat <- NULL\n  if(nrow(x) != 0) {\n    snps <- unlist(x[,22,with = FALSE], recursive = TRUE, use.names = FALSE)\n    snps <- gsub(\"x\", \",\", snps)\n    snps <- unlist( strsplit( snps , \"\\\\,\" ) )\n    snps <- snps[! snps %in% \"NR\"]\n    snps <- snps[!is.na(snps)]\n    snps <- gsub(\"(^[[:space:]]+|[[:space:]]+$)\", \"\", snps)\n    if(length(snps) != 0) {\n      dat <- table(snps)\n      dat <- data.table(dat)\n      colnames(dat) <- c(\"Snps\",\"Number_of_occurrences\")\n      dat$Snps <-  apply(dat, MARGIN = 1, \n                         function(x)  \n                         { names(x) = names(dat); \n                         paste(\"<a href=http://asia.ensembl.org/Homo_sapiens/Variation/Explore?db=core;r=7:87498388-87499388;v=\", x[\"Snps\"],\";vdb=variation;vf=115741667\",\" target=\\\"_blank\\\">\", x[\"Snps\"], \"</a>\", sep = \"\") } )\n      dat <- dat[order(dat$Number_of_occurrences,decreasing = TRUE),]\n    }\n  }\n  return(dat)\n}\n\nontology <- function(x) {\n  dat <- NULL\n  if(nrow(x) != 0) {\n    x <- x[!duplicated(x$DISEASE.TRAIT), ]\n    ont <- apply(x, MARGIN = 1, function(x)  {\n      names(x) = names(x);\n      paste(\"<a href=\\\"\", unlist( strsplit( x[\"MAPPED_TRAIT_URI\"] , \"\\\\,\" ) ),\"\\\" target=\\\"_blank\\\">\", \n            unlist( strsplit( x[\"MAPPED_TRAIT\"] , \"\\\\,\" ) ), \"</a>\", sep = \"\", collapse = \",\")} )\n    dat <- data.table(DISEASE = x$DISEASE.TRAIT,MAPPED_TRAIT = ont)\n  }\n  return(dat)\n}\n\ngwastable <- function (x) {\n  gwastab <- NULL\n  if(nrow(x) != 0) {\n    gwastab <- x\n    gwastab$PUBMEDID <- apply(gwastab, MARGIN = 1, function(x)  { names(x) = names(gwastab); paste(\"<a href=\\\"\", x[\"LINK\"],\"\\\" target=\\\"_blank\\\">\", x[\"PUBMEDID\"], \"</a>\", sep = \"\") } )\n    gwastab$FIRST.AUTHOR <- apply(gwastab, MARGIN = 1, function(x)  { names(x) = names(gwastab); paste(\"<a href=\\\"\", x[\"LINK\"],\"\\\" target=\\\"_blank\\\">\", x[\"FIRST.AUTHOR\"], \"</a>\", sep = \"\") } )\n    gwastab$MAPPED_TRAIT <- apply(gwastab, MARGIN = 1, function(x)  {\n      names(x) = names(gwastab);\n      paste(\"<a href=\\\"\", unlist( strsplit( x[\"MAPPED_TRAIT_URI\"] , \"\\\\,\" ) ),\"\\\" target=\\\"_blank\\\">\", \n            unlist( strsplit( x[\"MAPPED_TRAIT\"] , \"\\\\,\" ) ), \"</a>\", sep = \"\", collapse = \",\")} )\n    gwastab$MAPPED_TRAIT_URI <- NULL\n    gwastab$LINK <- NULL\n  }\n  return(gwastab)\n}\n\nshinyServer(function(input, output, session) {\n  \n  v <- reactiveValues(data = NULL,study = NULL,plot = NULL,num = NULL,most_chr = NULL,\n                      inf = NULL,logicdown = FALSE,num_occurrence_g = NULL,num_occurrence_s = NULL,ontology_tab = NULL,gwas_tab = NULL)\n  \n  observeEvent(input$go, {\n    reply <- search(gwas,input$a1)\n    if(nrow(reply) != 0) {\n      v$data <- disease(reply);\n      v$study <- study(reply);\n      v$plot <- chr(reply)[[1]];\n      v$most_chr <- chr(reply)[[2]];\n      v$num <- numbers(reply);\n      v$num_occurrence_g <- occurrence_gene(reply);\n      v$num_occurrence_s <- occurrence_snp(reply);\n      v$ontology_tab <- ontology(reply);\n      v$gwas_tab <- gwastable(reply);\n      v$logicdown <- TRUE;\n      v$inf <- NULL\n    } \n    else {\n      v$data <- NULL;\n      v$study <- NULL;\n      v$plot <- NULL;\n      v$num <- NULL;\n      v$most_chr <- NULL;\n      v$num_occurrence_g <- NULL;\n      v$num_occurrence_s <- NULL;\n      v$ontology_tab <- NULL;\n      v$gwas_tab <- NULL;\n      v$logicdown <- FALSE;\n      v$inf <- \"Not found\"\n    }\n  })\n  \n  observe({\n    if (v$logicdown) {\n      session$sendCustomMessage(\"download_ready\",TRUE)\n    }\n    else {\n      session$sendCustomMessage(\"download\",TRUE)\n    }\n  })\n  \n  myout <- reactive({\n    dat <- search(gwas,input$a1)\n    return(dat)\n  })\n  \n  output$data_file <- downloadHandler(\n    filename = function() { \n      paste('Gwas', '.csv', sep='')\n    },\n    content = function(file) {\n      write.csv(myout(), file)\n    }\n  )\n  \n  output$text <- renderText ({\n    paste(v$num,v$inf)\n  })\n  \n  output$text2 <- renderText ({\n    paste(v$most_chr)\n  })\n  \n  output$text1 <- renderText ({\n    paste(v$inf)\n  })\n  \n  output$text3 <- renderText({\n    paste(v$inf)\n  })\n  \n  output$table5 <- DT::renderDataTable({\n    DT::datatable(\n      v$ontology_tab,escape=FALSE,\n      filter = 'top',\n      class = \"cell-border\",\n      options = list(dom = 'rtp',pageLength = 10,\n                     searchHighlight = TRUE,\n                     initComplete = JS(\"function(settings, json) {\",\n                                       \"$(this.api().table().header()).css({'background-color': '#3474B7', 'color': '#fff'});\",\n                                       \"}\"),\n                     scrollX = TRUE\n      ),\n      style = 'bootstrap'\n    )\n  })\n  \n  output$table3 <- DT::renderDataTable({\n    DT::datatable(\n      v$num_occurrence_g,escape=FALSE,\n      filter = 'top',\n      class = \"cell-border\",\n      options = list(dom = 'rtp',pageLength = 10,\n                     searchHighlight = TRUE,\n                     initComplete = JS(\"function(settings, json) {\",\n                                       \"$(this.api().table().header()).css({'background-color': '#3474B7', 'color': '#fff'});\",\n                                       \"}\")\n      ),\n      style = 'bootstrap'\n    )\n  })\n  \n  output$table4 <- DT::renderDataTable({\n    DT::datatable(\n      v$num_occurrence_s,escape=FALSE,\n      filter = 'top',\n      class = \"cell-border\",\n      options = list(dom = 'rtp',pageLength = 10,\n                     searchHighlight = TRUE,\n                     initComplete = JS(\"function(settings, json) {\",\n                                       \"$(this.api().table().header()).css({'background-color': '#3474B7', 'color': '#fff'});\",\n                                       \"}\")\n      ),\n      style = 'bootstrap'\n    )\n  })\n  \n  output$table2 <- DT::renderDataTable({\n    DT::datatable(\n      v$study,escape=FALSE,\n      class = \"cell-border\",\n      options = list(dom = 'frtp',pageLength = 10,\n                     searchHighlight = TRUE,\n                     initComplete = JS(\"function(settings, json) {\",\n                                       \"$(this.api().table().header()).css({'background-color': '#3474B7', 'color': '#fff'});\",\n                                       \"}\"),\n                     scrollX = TRUE\n      ),\n      style = 'bootstrap'\n    )\n  })\n  \n  output$view <- renderGvis({\n    validate(need(v$plot, ''))\n    gvisColumnChart(v$plot,\n                    options=list(backgroundColor = '#fcfcfc',\n                                 title = \"Affected chromosomes\",\n                                 titleTextStyle=\"{color:'blue',\n                                 fontSize:18}\",\n                                 isStacked = \"true\",\n                                 vAxes=\"[{title:'Number',\n                                 textPosition: 'out'}]\",\n                                 hAxes=\"[{title:'Chromosome',\n                                 textPosition: 'out',\n                                 textStyle: {\n                                 fontSize: 10}}]\",\n                                 width=850, height=450)\n    )\n  })\n  \n  output$table1 <- DT::renderDataTable({\n    DT::datatable(\n      v$data,escape=FALSE,\n      class = \"cell-border\",\n      options = list(dom = 'frtp',pageLength = 10,\n                     searchHighlight = TRUE,\n                     initComplete = JS(\"function(settings, json) {\",\n                                       \"$(this.api().table().header()).css({'background-color': '#3474B7', 'color': '#fff'});\",\n                                       \"}\"),\n                     scrollX = TRUE\n      ),\n      style = 'bootstrap'\n    )\n  })\n  \n  output$table <- DT::renderDataTable({\n    DT::datatable(\n      v$gwas_tab,escape=FALSE,\n      filter = 'bottom',\n      class = \"cell-border\",\n      extensions = 'FixedColumns',\n      options = list(dom = 'lrtip',\n                     searchHighlight = TRUE,\n                     initComplete = JS(\"function(settings, json) {\",\n                                       \"$(this.api().table().header()).css({'background-color': '#3474B7', 'color': '#fff'});\",\n                                       \"}\"),\n                     scrollY = 480,scrollX = TRUE\n      ),\n      style = 'bootstrap'\n    )\n  })\n  \n  })\n\n",
    "created" : 1474556860634.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2282859625",
    "id" : "ECBBDF46",
    "lastKnownWriteTime" : 1468664116,
    "last_content_update" : 1468664116,
    "path" : "~/Downloads/Shiny komp/Newapp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}